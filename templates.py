import datetime
import logging
import re

import discord
from discord import app_commands

import security

_action_types = {
    'ban': '–ë–∞–Ω',
    'kick': '–ö–∏–∫',
    'mute': '–ú—É—Ç',
    'warn': '–í–∞—Ä–Ω',
    'hide': '–•–∞–π–¥',
    'role': "—Ä–æ–ª–∏"
}

_action_notes = {
    'give': "–í—ã–¥–∞—á–∞: ",
    'remove': "–°–Ω—è—Ç–∏–µ: ",
    'full': "–ü–æ–ª–Ω—ã–π",
    'voice': "–ì–æ–ª–æ—Å–æ–≤–æ–π",
    'text': "–¢–µ–∫—Å—Ç–æ–≤—ã–π",
    'global': "–ì–ª–æ–±–∞–ª—å–Ω—ã–π",
    'temp': "–í—Ä–µ–º–µ–Ω–Ω—ã–π",
    'approve': "–û–¥–æ–±—Ä–µ–Ω–∏–µ",
    'reject': "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ",
}


def action(action_type: str, *, short: bool = False) -> str:
    if short:
        action_type = action_type.replace('give', '').replace('remove', '')
    result = [name for template_note_type, name in _action_notes.items() if template_note_type in action_type]
    result += [name for template_action_type, name in _action_types.items() if template_action_type in action_type]
    return ' '.join(result).capitalize()


def user(obj: discord.Member | discord.User | int) -> str:
    if isinstance(obj, int):
        return f'<@{obj}>'
    
    result = obj.mention
    if tag := security.user_tag(obj):
        result += f' ({tag})'
    return result


def time(seconds: float | None, precise: bool = False) -> str:
    if seconds is None:
        return '–ù–∞–≤—Å–µ–≥–¥–∞'

    if seconds < 60:
        return f'{seconds:.0f} —Å–µ–∫.'
    elif seconds < 3600:
        minutes = seconds // 60
        local_seconds = seconds % 60
        return f'{minutes:.0f} –º–∏–Ω.' if not precise else f'{minutes:.0f} –º–∏–Ω. {local_seconds:.0f} —Å–µ–∫.'
    elif seconds < 86400:
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        local_seconds = seconds % 60
        if precise:
            return f"{hours:.0f} —á. {minutes:.0f} –º–∏–Ω. {local_seconds:.0f} —Å–µ–∫."
        else:
            return f"{hours:.0f} —á." + (f' {minutes:.0f} –º–∏–Ω.' if minutes else '')
    else:
        return f"{seconds // 86400:.0f} –¥–Ω."


def date(obj: datetime.datetime, *, date_format: str = 'f') -> str:
    return f'<t:{int(obj.astimezone(datetime.UTC).timestamp())}:{date_format}>'


def link(obj: str, alias: str = '–°—Å—ã–ª–∫–∞') -> str:
    return f'[{alias}]({obj})'


_mention_regex = re.compile(r'<@!?(\d+)>')


def embed_mentions(embed: discord.Embed) -> str:
    all_text = ''
    
    if embed.description:
        all_text += embed.description
        
    if embed.fields:
        for field in embed.fields:
            if not field.value:
                continue
            all_text += field.value
    groups = _mention_regex.findall(all_text)
    groups = list(set(groups))
    return '-# ||' + ', '.join([f'<@{m}>' for m in groups]) + '||'


async def link_action(interaction: discord.Interaction, act, screenshot: list[discord.Message] | None = None, target_message: discord.Message | None = None, db = None, **objects) -> None:
    if screenshot:
        await interaction.response.send_message('### üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π\n–û–∂–∏–¥–∞–π—Ç–µ...', ephemeral=True)
    message = await act.log(interaction.guild, screenshot, target_message, db, **objects)

    if screenshot:
        await interaction.edit_original_response(content=f'## ü•≥ –£—Å–ø–µ—Ö!\n[–î–µ–π—Å—Ç–≤–∏–µ]({message.jump_url}) —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.', view=None)
    elif not interaction.response.is_done():
        await interaction.response.send_message(
            f'## ü•≥ –£—Å–ø–µ—Ö!\n[–î–µ–π—Å—Ç–≤–∏–µ]({message.jump_url}) —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.',
            ephemeral=True
        )

    await act.notify_user(**objects)


async def on_tree_error(interaction: discord.Interaction, error: app_commands.AppCommandError | str):
    if interaction.response.is_done():
        print('Unhandled error:', error)
    if isinstance(error, app_commands.CommandOnCooldown):
        await interaction.response.send_message(
            f"–ö–æ–º–∞–Ω–¥–∞ –µ—â—ë –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ **{error.retry_after:.2f}** —Å–µ–∫!",
            ephemeral=True
        )
    elif isinstance(error, app_commands.MissingPermissions):
        await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤", ephemeral=True)
    elif isinstance(error, app_commands.CommandInvokeError) or isinstance(error, str):
        embed = discord.Embed(
            title='üíÄ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
            description=str(error.original if isinstance(error, app_commands.CommandInvokeError) else error),
            color=discord.Color.dark_grey()
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)
    else:
        logging.warning(f'Error: {error}')
        await interaction.response.send_message("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", ephemeral=True)

def user_notify_description(act, **objects):
    description = f'### –î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, {objects['user'].mention}.\n'
    if act.type != 'role_approve':
        if 'role' not in act.type:
            description += f'–í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ {objects["moderator"].mention}.\n'
        else:
            if 'remove' in act.type:
                description += '–í–∞–º –±—ã–ª–∞ —Å–Ω—è—Ç–∞ —Ä–æ–ª—å.\n'
            else:
                description += '–í–∞—à–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ä–æ–ª—å –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.\n'
        description += "-# –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ [—Ñ–æ—Ä—É–º –ø—Ä–æ–µ–∫—Ç–∞](https://forum.radmir.games)."
    return description

def role_requested(nickname, role, rang):
    embed = discord.Embed(title='–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ä–æ–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', color=discord.Color.gold(), timestamp=discord.utils.utcnow())
    embed.add_field(name='–ù–∏–∫–Ω–µ–π–º', value=nickname, inline=True)
    embed.add_field(name='–î–æ–ª–∂–Ω–æ—Å—Ç—å', value=rang, inline=True)
    embed.add_field(name='–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', value=role, inline=False)
    embed.set_footer(text='–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è')
    return embed

def role_requests(command_id):
    return f'## –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ **</role:{command_id}>** –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è –Ω–∞ —Ä–æ–ª—å.'

def role(role):
    return f'<&{role}>'
