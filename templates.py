import datetime
import re
import functools

import discord

import security


_action_types = {
    'ban': '–ë–∞–Ω',
    'kick': '–ö–∏–∫',
    'mute': '–ú—É—Ç',
    'warn': '–í–∞—Ä–Ω',
    'hide': '–•–∞–π–¥'
}

_action_notes = {
    'give': "–í—ã–¥–∞—á–∞: ",
    'remove': "–°–Ω—è—Ç–∏–µ: ",
    'full': "–ü–æ–ª–Ω—ã–π",
    'voice': "–ì–æ–ª–æ—Å–æ–≤–æ–π",
    'text': "–¢–µ–∫—Å—Ç–æ–≤—ã–π",
    'global': "–ì–ª–æ–±–∞–ª—å–Ω—ã–π",
    'temp': "–í—Ä–µ–º–µ–Ω–Ω—ã–π",
    'approve': "–û–¥–æ–±—Ä–µ–Ω–∏–µ",
    'reject': "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ",
}


def action(action_type: str) -> str:
    result = [name for template_note_type, name in _action_notes.items() if template_note_type in action_type]
    result += [name for template_action_type, name in _action_types.items() if template_action_type in action_type]
    return ' '.join(result).capitalize()


def user(obj: discord.Member | discord.User) -> str:
    result = obj.mention
    if tag := security.user_tag(obj):
        result += f' ({tag})'
    return result


def time(seconds: float | None) -> str:
    if seconds is None:
        return '–ù–∞–≤—Å–µ–≥–¥–∞'
    
    if seconds < 60:
        return f'{seconds} —Å–µ–∫.'
    elif seconds < 3600:
        return f'{seconds // 60} –º–∏–Ω.'
    elif seconds < 86400:
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        return f"{hours} —á. {minutes} –º–∏–Ω."
    return f"{seconds // 86400} –¥–Ω."


def date(obj: datetime.datetime) -> str:
    return f'<t:{int(obj.astimezone(datetime.UTC).timestamp())}:f>'


def link(obj: str, alias: str = '–°—Å—ã–ª–∫–∞') -> str:
    return f'[{alias}]({obj})'


_mention_regex = re.compile(r'<@!?(\d+)>')


def embed_mentions(embed: discord.Embed) -> str:
    all_text = ''
    
    if embed.description:
        all_text += embed.description
        
    if embed.fields:
        for field in embed.fields:
            if not field.value:
                continue
            all_text += field.value
    groups = _mention_regex.findall(all_text)
    return '-# ||' + ', '.join([f'<@{m}>' for m in groups]) + '||'


async def link_action(interaction: discord.Interaction, act, **objects) -> None:
    message = await act.log(interaction.guild, **objects)
    await interaction.response.send_message(
        f'## ü•≥ –£—Å–ø–µ—Ö!\n[–î–µ–π—Å—Ç–≤–∏–µ]({message.jump_url}) —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.',
        ephemeral=True
    )


def parse_duration(duration: str, default_unit: str) -> int:
    match = re.match(r"^(\d+)([—Åm—á–¥]?)$", duration)
    if not match:
        raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 1—Å, 1–º, 1—á.\n"
                         "–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∏—Å–ª–æ –±–µ–∑ –µ–¥–∏–Ω–∏—Ü—ã –¥–ª—è —Å–µ–∫—É–Ω–¥.")

    value, unit = int(match.group(1)), match.group(2) or default_unit
    if unit == '—Å':
        return value
    elif unit == '–º':
        return value * 60
    elif unit == '—á':
        return value * 3600
    elif unit == '–¥':
        return value * 86400
    else:
        raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏.")


def duration_formatter(default_unit: str = '—Å'):
    def decorator(func):
        @functools.wraps(func)
        async def wrapper(self, interaction, user, duration, reason, *args, **kwargs):
            try:
                duration_in_seconds = parse_duration(duration, default_unit)
            except ValueError as e:
                await interaction.response.send_message(str(e), ephemeral=True)
                return

            return await func(self, interaction, user, duration_in_seconds, reason, *args, **kwargs)

        return wrapper

    return decorator