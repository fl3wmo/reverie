from datetime import datetime, timedelta
from typing import List, NamedTuple, Optional, Dict, Tuple

import discord
from discord import app_commands
from discord.app_commands import Choice
from discord.ext import commands

import autocompletes
from features import Pagination
import security
import templates
from bot import EsBot
from database.online.features import is_date_valid
from info.tracking.stats import ModeratorStats
from info.tracking.tracker import ModeratorTracker
from info.tracking.formatter import StatsFormatter
from database import db


class ActionInfo(NamedTuple):
    moderator_id: int
    action_text: str

    def to_text(self, index: int) -> str:
        return f"### üßë‚Äçüíº <@{self.moderator_id}>\n{self.action_text}"


@app_commands.default_permissions(manage_nicknames=True)
@app_commands.guild_only()
class TrackingCog(commands.GroupCog, name='tracking'):
    def __init__(self, bot: EsBot):
        self.bot = bot
        super().__init__()

    async def create_stats_embed(
            self,
            title: str,
            moderator_stats: Dict[discord.Member, ModeratorStats],
            date_info: Optional[str] = None
    ) -> discord.Embed:
        embed = discord.Embed(
            title=title,
            color=discord.Color.light_embed(),
            timestamp=discord.utils.utcnow()
        )
        embed.set_thumbnail(url='https://i.imgur.com/B1awIXx.png')
        embed.set_footer(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞')

        if date_info:
            embed.add_field(name='–î–∞—Ç–∞', value=date_info, inline=True)

        for moderator, stats in moderator_stats.items():
            embed.add_field(
                name=moderator.display_name,
                value=stats.format_stats(),
                inline=False
            )

        return embed

    @app_commands.command(name='my', description='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
    @app_commands.rename(date='–¥–∞—Ç–∞')
    @app_commands.describe(date='–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.YYYY')
    @app_commands.autocomplete(date=autocompletes.date)
    @security.restricted(security.PermissionLevel.MD)
    async def my(self, interaction: discord.Interaction, date: Optional[str] = None):
        await self.show_moderator_stats(interaction, interaction.user, date)

    @app_commands.command(name='moderator', description='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞')
    @app_commands.rename(moderator='–º–æ–¥–µ—Ä–∞—Ç–æ—Ä', date='–¥–∞—Ç–∞')
    @app_commands.describe(
        moderator='–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä, –¥–µ–π—Å—Ç–≤–∏—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å',
        date='–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.YYYY'
    )
    @app_commands.autocomplete(date=autocompletes.date)
    @security.restricted(security.PermissionLevel.GMD)
    async def moderator(
            self,
            interaction: discord.Interaction,
            moderator: discord.Member,
            date: Optional[str] = None
    ):
        await self.show_moderator_stats(interaction, moderator, date)

    async def show_moderator_stats(
            self,
            interaction: discord.Interaction,
            moderator: discord.Member,
            date: Optional[str] = None
    ):
        date = date or datetime.now().strftime('%d.%m.%Y')
        if not is_date_valid(date):
            raise ValueError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –§–æ—Ä–º–∞—Ç: dd.mm.YYYY.\n–ü—Ä–∏–º–µ—Ä: 07.07.2077')

        date_obj = datetime.strptime(date, '%d.%m.%Y')
        tracker = ModeratorTracker(interaction.guild)
        stats = await tracker.get_stats(moderator.id, date_obj)

        embed = discord.Embed(
            description=f'### üõ†Ô∏è –î–µ–π—Å—Ç–≤–∏—è {moderator.mention}',
            color=discord.Color.light_embed(),
            timestamp=discord.utils.utcnow()
        )
        embed.add_field(name='–ù–æ—Ä–º–∞', value=stats.format_stats(), inline=True)
        embed.add_field(name='–î–∞—Ç–∞', value=date, inline=True)
        embed.set_thumbnail(url='https://i.imgur.com/B1awIXx.png')
        embed.add_field(
            name='–ù–∞–∫–∞–∑–∞–Ω–∏—è',
            value='„Éª ' + StatsFormatter.format_actions(stats.punishments),
            inline=False
        )
        embed.add_field(
            name='–†–æ–ª–∏',
            value='„Éª ' + StatsFormatter.format_roles(stats.roles),
            inline=False
        )
        embed.set_footer(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

        await interaction.response.send_message(
            content=templates.embed_mentions(embed),
            embed=embed,
            ephemeral=True
        )

    @app_commands.command(name='week', description='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é')
    @app_commands.rename(moderator='–º–æ–¥–µ—Ä–∞—Ç–æ—Ä', week='–Ω–µ–¥–µ–ª—è')
    @app_commands.describe(
        moderator='–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä, –¥–µ–π—Å—Ç–≤–∏—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å',
        week='–ù–µ–¥–µ–ª—è –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å'
    )
    @app_commands.choices(week=[
        Choice(name='–¢–µ–∫—É—â–∞—è', value='–¢–µ–∫—É—â–∞—è'),
        Choice(name='–ü—Ä–æ—à–ª–∞—è', value='–ü—Ä–æ—à–ª–∞—è')
    ])
    @security.restricted(security.PermissionLevel.GMD)
    async def week(
            self,
            interaction: discord.Interaction,
            week: Choice[str],
            moderator: Optional[discord.Member] = None
    ):
        today = datetime.now()
        if week.value == '–¢–µ–∫—É—â–∞—è':
            start_date = today - timedelta(days=today.weekday())
        elif week.value == '–ü—Ä–æ—à–ª–∞—è':
            start_date = today - timedelta(days=today.weekday() + 7)
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ –≤—ã–±—Ä–∞–Ω–∞ –Ω–µ–¥–µ–ª—è.")

        end_date = start_date + timedelta(days=6)
        moderators = ([moderator] if moderator else
                      list(set(member for role in security.moderation_team(interaction.guild)
                               for member in role.members)))

        tracker = ModeratorTracker(interaction.guild)
        stats = {
            mod: await tracker.get_stats(mod.id, start_date, end_date)
            for mod in moderators
        }

        embed = await self.create_stats_embed(
            title='üìÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é',
            moderator_stats=stats,
            date_info=f'{week.name}\n({start_date.strftime("%d.%m")} - {end_date.strftime("%d.%m")})'
        )

        await interaction.response.send_message(embed=embed, ephemeral=True)

    @app_commands.command(name='month', description='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –º–µ—Å—è—Ü')
    @app_commands.rename(moderator='–º–æ–¥–µ—Ä–∞—Ç–æ—Ä', month='–º–µ—Å—è—Ü')
    @app_commands.describe(
        moderator='–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä, –¥–µ–π—Å—Ç–≤–∏—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å',
        month='–ú–µ—Å—è—Ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ mm.YYYY'
    )
    @app_commands.autocomplete(month=autocompletes.month)
    @security.restricted(security.PermissionLevel.GMD)
    async def month(
            self,
            interaction: discord.Interaction,
            month: str,
            moderator: discord.Member
    ):
        if not is_date_valid(month, '%m.%Y'):
            raise ValueError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Å—è—Ü–∞. –§–æ—Ä–º–∞—Ç: mm.YYYY.\n–ü—Ä–∏–º–µ—Ä: 07.2077')

        month_obj = datetime.strptime(month, '%m.%Y')
        start_date = month_obj.replace(day=1)
        end_date = (start_date + timedelta(days=33)).replace(day=1) - timedelta(days=1)

        tracker = ModeratorTracker(interaction.guild)
        stats = await tracker.get_stats(moderator.id, start_date, end_date, return_by_dates=True)

        embed = discord.Embed(
            title=f'üìÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {month}',
            color=discord.Color.light_embed(),
            description=f'### üõ†Ô∏è –î–µ–π—Å—Ç–≤–∏—è {moderator.mention}\n\n{stats.format_stats()}',
            timestamp=discord.utils.utcnow()
        )
        embed.set_thumbnail(url='https://i.imgur.com/B1awIXx.png')
        embed.set_footer(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
        embed.add_field(name='–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', value=stats.format_global_stats())

        await interaction.response.send_message(embed=embed, ephemeral=True)


    @app_commands.command(name='day', description='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å')
    @app_commands.rename(moderator='–º–æ–¥–µ—Ä–∞—Ç–æ—Ä', date='–¥–∞—Ç–∞')
    @app_commands.describe(
        moderator='–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä, –¥–µ–π—Å—Ç–≤–∏—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å',
        date='–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.YYYY'
    )
    @app_commands.autocomplete(date=autocompletes.date)
    @security.restricted(security.PermissionLevel.GMD)
    async def day(
            self,
            interaction: discord.Interaction,
            date: str,
            moderator: Optional[discord.Member] = None
    ):
        if not is_date_valid(date):
            raise ValueError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –§–æ—Ä–º–∞—Ç: dd.mm.YYYY.\n–ü—Ä–∏–º–µ—Ä: 07.07.2077')

        date_obj = datetime.strptime(date, '%d.%m.%Y')
        moderators = ([moderator] if moderator else
                      list(set(member for role in security.moderation_team(interaction.guild)
                               for member in role.members)))

        tracker = ModeratorTracker(interaction.guild)
        stats = {
            mod: await tracker.get_stats(mod.id, date_obj)
            for mod in moderators
        }

        embed = await self.create_stats_embed(
            title=f'üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {date}',
            moderator_stats=stats
        )

        await interaction.response.send_message(embed=embed)

    @app_commands.command(name='check', description='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞')
    @security.restricted(security.PermissionLevel.CUR)
    async def check(self, interaction: discord.Interaction):
        similar_actions = await db.actions.similar(interaction.guild.id)
        if not similar_actions:
            return await interaction.response.send_message('–ü–æ—Ö–æ–∂–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', ephemeral=True)
        
        # Process and format the data
        formatted_data: List[Tuple[int, ActionInfo]] = []
        moderators = {}
        
        # Group actions by moderator and user
        for action in similar_actions:
            moderators.setdefault(action.moderator, {}).setdefault(action.user, []).append(action)
        
        # Format the data for pagination
        index = 0
        for moderator_id, users in moderators.items():
            action_text = ""
            for user_id, actions in users.items():
                action_text += f"<@{user_id}> ({len(actions)} –¥–µ–π—Å—Ç–≤–∏–π)\n-# Acts: {', '.join(str(a.id) for a in actions)}\n"
            action_info = ActionInfo(
                moderator_id=moderator_id,
                action_text=action_text
            )
            formatted_data.append((index, action_info))
            index += 1
        
        # Create and send paginated view
        paginator = Pagination(
            bot=self.bot,
            interaction=interaction,
            owner=interaction.user,
            data=formatted_data,
            page_size=5,
            embed_title="–ü–æ—Ö–æ–∂–∏–µ –¥–µ–π—Å—Ç–≤–∏—è"
        )
        
        await paginator.send_initial_message()

async def setup(bot: EsBot):
    await bot.add_cog(TrackingCog(bot))